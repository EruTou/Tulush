# Ertine Tulush 912 group. Lesson 12 - tuples.

'''
Задание: 1
Напишите функцию tpl_sort(), которая сортирует кортеж, состоящий из целых 
чисел по возрастанию и возвращает его. Если хотя бы один элемент не является 
целым числом, то функция возвращает исходный кортеж.
'''


def tpl_sort(notSortedTuple):
    for i in notSortedTuple:
        if i < 1:  # проверка эл-ов кортежа на целочисленный тип
            return notSortedTuple
    sortedTuple = tuple(sorted(notSortedTuple))
    print(sortedTuple)  # вывод отсортированного кортежа
    return type(sortedTuple)  # вывод типа отсортированного кортежа


for i in range(2):
    tpl = []
    for i in range(5):
        tpl.append(int(input("Введите число: ")))
    my_tpl = tuple(tpl)
    print(my_tpl)  # проверка заполненного кортежа
    print(type(my_tpl))  # проверка типа кортежа
    print(tpl_sort(my_tpl))


# Введите число: 55
# Введите число: 321
# Введите число: 5
# Введите число: 621
# Введите число: 2321
# (55, 321, 5, 621, 2321)
# <class 'tuple'>
# (5, 55, 321, 621, 2321)
# <class 'tuple'>
# Введите число: 532
# Введите число: 23
# Введите число: 432
# Введите число: -52
# Введите число: -32
# (532, 23, 432, -52, -32)
# <class 'tuple'>
# (532, 23, 432, -52, -32)


'''
Задание: 2
Функция slicer() на вход принимает кортеж и случайный элемент. Требуется 
вернуть новый кортеж, начинающийся с первого появления элемента в нем и 
заканчивающийся вторым его появлением включительно. Если элемента нет 
вовсе – вернуть пустой кортеж. Если элемент встречается только один раз, 
то вернуть кортеж, который начинается с него и идет до конца исходного.
'''


def slicer(notSortedTuple, elem):
    if elem in notSortedTuple:
        if notSortedTuple.count(elem) > 1:
            first = notSortedTuple.index(elem)
            second = notSortedTuple.index(elem, first + 1) + 1
            return notSortedTuple[first:second]
        else:
            return notSortedTuple[notSortedTuple.index(elem):]
    else:
        return ()


for i in range(3):
    tpl = []
    for i in range(6):
        tpl.append(input("Введите элемент для кортежа: "))
    myTuple = tuple(tpl)
    anyElem = input("Введите любой элемент: ")
    print(f'Исходный кортеж равен {myTuple}')  # проверка заполненного кортежа
    print(f'Проверка типа кортежа {type(myTuple)}')  # проверка типа кортежа
    print(slicer(myTuple, anyElem))


# Введите элемент для кортежа:
# b
# Введите элемент для кортежа:
# a
# Введите элемент для кортежа:
# n
# Введите элемент для кортежа:
# a
# Введите элемент для кортежа:
# h
# Введите элемент для кортежа:
# i
# Введите любой элемент:
# a
# Исходный кортеж равен ('b', 'a', 'n', 'a', 'h', 'i')
# Проверка типа кортежа <class 'tuple'>
# ('a', 'n', 'a')
# Введите элемент для кортежа:
# b
# Введите элемент для кортежа:
# a
# Введите элемент для кортежа:
# n
# Введите элемент для кортежа:
# a
# Введите элемент для кортежа:
# h
# Введите элемент для кортежа:
# i
# Введите любой элемент:
# n
# Исходный кортеж равен ('b', 'a', 'n', 'a', 'h', 'i')
# Проверка типа кортежа <class 'tuple'>
# ('n', 'a', 'h', 'i')
# Введите элемент для кортежа:
# b
# Введите элемент для кортежа:
# a
# Введите элемент для кортежа:
# n
# Введите элемент для кортежа:
# a
# Введите элемент для кортежа:
# h
# Введите элемент для кортежа:
# i
# Введите любой элемент:
# f
# Исходный кортеж равен ('b', 'a', 'n', 'a', 'h', 'i')
# Проверка типа кортежа <class 'tuple'>
# ()


'''
Задание: 3
На вход функции sieve() поступает список целых чисел. В результате выполнения 
этой функции будет получен кортеж уникальных элементов списка в обратном порядке.
'''


def sieve(notRevList):
    tempList = []
    revList = []
    [revList.append(i) for i in reversed(notRevList)]  # переворачивание списка
    print(revList)
    # заполнение пустого списка уник-ми эл-ми
    [tempList.append(i) for i in revList if i not in tempList]
    # возвращение в виде кортежа перевернутого списка с уникальными эл-ми
    return tuple(tempList)


lst = []
for i in range(5):
    lst.append(int(input('Введите число: ')))
print(lst)
print(sieve(lst))

# Введите число: 2
# Введите число: 4
# Введите число: 6
# Введите число: 8
# Введите число: 4
# [2, 4, 6, 8, 4] - вывод созданного и заполненного списка для проверки
# [4, 8, 6, 4, 2] - вывод перевернутого списка для проверки
# [4, 8, 6, 2] - вывод кортежа с уник-ми эл-ми


'''
Задание: 4
Николай знает, что кортежи являются неизменяемыми, но он с этим не готов соглашаться. 
Ученик решил создать функцию del_from_tuple(), которая будет удалять первое появление 
определенного элемента из кортежа по значению и возвращать кортеж без оного. Попробуйте 
повторить шедевр не признающего авторитеты начинающего программиста. К слову, 
Николай не всегда уверен в наличии элемента в кортеже (в этом случае кортеж 
вернется функцией в исходном виде).
'''


def del_from_tuple(tpl, elem):
    if elem in tpl:
        delElemInd = tpl.index(elem)
        return tpl[:delElemInd] + tpl[delElemInd + 1:]
    return tpl


myList = []
for i in range(5):
    myList.append(input("Введите элемент кортежа: "))
print(tuple(myList))
print(del_from_tuple(tuple(myList), input("Введите произвольный элемент: ")))


# Введите элемент кортежа:
# 1
# Введите элемент кортежа:
# 2
# Введите элемент кортежа:
# g
# Введите элемент кортежа:
# 2
# Введите элемент кортежа:
# a
# ('1', '2', 'g', '2', 'a')
# Введите произвольный элемент:
# 2
# ('1', 'g', '2', 'a')
